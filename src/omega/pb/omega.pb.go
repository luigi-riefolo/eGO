// Code generated by protoc-gen-go. DO NOT EDIT.
// source: omega.proto

/*
Package omega is a generated protocol buffer package.

Omega Service

Omega Service.

It is generated from these files:
	omega.proto

It has these top-level messages:
	Message
	DumpReq
	DumpItem
*/
package omega

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message represents a simple message sent to the Echo service.
type Message struct {
	// Id represents the message identifier.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The message to be sent.
	Msg string `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Message) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type DumpReq struct {
}

func (m *DumpReq) Reset()                    { *m = DumpReq{} }
func (m *DumpReq) String() string            { return proto.CompactTextString(m) }
func (*DumpReq) ProtoMessage()               {}
func (*DumpReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type DumpItem struct {
	Key string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Val string `protobuf:"bytes,2,opt,name=val" json:"val,omitempty"`
}

func (m *DumpItem) Reset()                    { *m = DumpItem{} }
func (m *DumpItem) String() string            { return proto.CompactTextString(m) }
func (*DumpItem) ProtoMessage()               {}
func (*DumpItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DumpItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *DumpItem) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "omega.Message")
	proto.RegisterType((*DumpReq)(nil), "omega.DumpReq")
	proto.RegisterType((*DumpItem)(nil), "omega.DumpItem")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OmegaService service

type OmegaServiceClient interface {
	// Echo method receives a simple message and returns it.
	// The message posted as the id parameter will also be returned.
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type omegaServiceClient struct {
	cc *grpc.ClientConn
}

func NewOmegaServiceClient(cc *grpc.ClientConn) OmegaServiceClient {
	return &omegaServiceClient{cc}
}

func (c *omegaServiceClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/omega.OmegaService/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OmegaService service

type OmegaServiceServer interface {
	// Echo method receives a simple message and returns it.
	// The message posted as the id parameter will also be returned.
	Echo(context.Context, *Message) (*Message, error)
}

func RegisterOmegaServiceServer(s *grpc.Server, srv OmegaServiceServer) {
	s.RegisterService(&_OmegaService_serviceDesc, srv)
}

func _OmegaService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OmegaServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/omega.OmegaService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OmegaServiceServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _OmegaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "omega.OmegaService",
	HandlerType: (*OmegaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _OmegaService_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "omega.proto",
}

func init() { proto.RegisterFile("omega.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcf, 0x4d, 0x4d,
	0x4f, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0xa4, 0x64, 0xd2, 0xf3, 0xf3,
	0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32,
	0xf3, 0xf3, 0x8a, 0x21, 0x8a, 0x94, 0xb4, 0xb9, 0xd8, 0x7d, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53,
	0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32, 0x53,
	0x84, 0x04, 0xb8, 0x98, 0x73, 0x8b, 0xd3, 0x25, 0x98, 0xc0, 0x02, 0x20, 0xa6, 0x12, 0x27, 0x17,
	0xbb, 0x4b, 0x69, 0x6e, 0x41, 0x50, 0x6a, 0xa1, 0x92, 0x1e, 0x17, 0x07, 0x88, 0xe9, 0x59, 0x92,
	0x9a, 0x0b, 0x52, 0x98, 0x9d, 0x5a, 0x09, 0xd5, 0x09, 0x62, 0x82, 0x44, 0xca, 0x12, 0x73, 0x60,
	0x5a, 0xcb, 0x12, 0x73, 0x8c, 0x2c, 0xb8, 0x78, 0xfc, 0x41, 0xce, 0x09, 0x4e, 0x2d, 0x2a, 0xcb,
	0x4c, 0x4e, 0x15, 0xd2, 0xe0, 0x62, 0x71, 0x4d, 0xce, 0xc8, 0x17, 0xe2, 0xd3, 0x83, 0x38, 0x19,
	0xea, 0x08, 0x29, 0x34, 0xbe, 0x12, 0x83, 0x13, 0x7b, 0x14, 0xc4, 0x23, 0x49, 0x6c, 0x60, 0x17,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xbe, 0x04, 0x6d, 0xe5, 0x00, 0x00, 0x00,
}
